---
description: 
globs: 
alwaysApply: true
---
# 开发指南

## 环境配置

### 依赖管理
- 使用Poetry管理依赖：[pyproject.toml](mdc:pyproject.toml)
- 备用requirements：[requirements.txt](mdc:requirements.txt)
- 锁定文件：[poetry.lock](mdc:poetry.lock)

### 环境变量配置
创建 `.env` 文件并配置以下API密钥：
```
PYTHONWARNINGS=ignore
ANONYMIZED_TELEMETRY=false
HUGGINEFACE_API_KEY=your_key
OPENAI_API_BASE=https://api.openai.com/v1
OPENAI_API_KEY=your_key
ANTHROPIC_API_BASE=https://api.anthropic.com
ANTHROPIC_API_KEY=your_key
GOOGLE_APPLICATION_CREDENTIALS=path_to_credentials
GOOGLE_API_BASE=https://generativelanguage.googleapis.com
GOOGLE_API_KEY=your_key
```

## 项目结构

### 核心模块
- **配置管理**：[src/config/](mdc:src/config) - 系统配置和参数管理
- **基础组件**：[src/base/](mdc:src/base) - 基础类和接口定义
- **工具集合**：[src/tools/](mdc:src/tools) - 智能体使用的工具
- **内存管理**：[src/memory/](mdc:src/memory) - 对话历史和状态管理
- **模型接口**：[src/models/](mdc:src/models) - LLM模型接口封装
- **代理服务**：[src/proxy/](mdc:src/proxy) - API代理和负载均衡
- **异常处理**：[src/exception/](mdc:src/exception) - 自定义异常类
- **日志系统**：[src/logger/](mdc:src/logger) - 日志配置和管理
- **工具函数**：[src/utils/](mdc:src/utils) - 通用工具函数

### 测试和示例
- **测试用例**：[tests/](mdc:tests) - 单元测试和集成测试
- **使用示例**：[examples/](mdc:examples) - 项目使用示例
- **配置示例**：[configs/](mdc:configs) - 配置文件示例
- **文档资料**：[docs/](mdc:docs) - 项目文档

## 开发工作流

### 安装和设置
```bash
# 使用Poetry安装
make install

# 或使用requirements.txt
make install-requirements

# 手动安装Playwright（如果需要）
pip install playwright
playwright install chromium --with-deps --no-shell
```

### 运行和测试
- 运行示例：`python examples/run_example.py`
- GAIA基准测试：`python examples/run_gaia.py`
- 构建命令：参考 [Makefile](mdc:Makefile)

## 代码规范

### 异步编程
- 项目采用异步架构，优先使用async/await
- 智能体间的通信和工具调用都是异步的
- 注意处理异步异常和超时

### 模块化设计
- 每个智能体独立模块化
- 工具和配置分离
- 保持接口的一致性和可扩展性

### 错误处理
- 使用自定义异常类：[src/exception/](mdc:src/exception)
- 记录详细的错误日志
- 提供优雅的降级机制

## 扩展开发

### 添加新智能体
1. 在 [src/agent/](mdc:src/agent) 下创建新目录
2. 继承基础智能体类
3. 实现必要的接口方法
4. 在注册表中注册

### 添加新工具
1. 在 [src/tools/](mdc:src/tools) 下实现工具类
2. 支持异步调用
3. 添加适当的错误处理
4. 编写工具文档和示例
